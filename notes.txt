pinkish color #f5e1eb
orangish color #f28150
greenish color #145e13

orangish 2 #f59c76

recursive iteration algorithm:

Purpose: To get a list of all objects and their respecitve sub-objects, then 
insert them into a template.

To accomplish this we must:
A. define how to aquire a single object and its' sub objects,
then figure out how to run the process in a loop. and 

B. Figure out how to add them to the template without knowing the number

A.1. Aquire a single object:
To get a single object we need its primary key. We'll create the query like so:

object = PassDown.objects.get(pk=1)

we now have the singe object and can get its sub objects.

A.2. Aquire objects' sub-objects
Getting the sub-objects of a single object is easy:

subobject-list = object.entry_set.all()

for subobject in subobject-list:
    print(subobject)

This prints all subobjects. we could just as easily add them to a list or dict.
subobject-list is of the type queryset, which appears to be iterable.

A.3. Run this process in a loop:
To get all objects can easily use the .all() method. To get all sub-objects we need a list of all the primary keys:

objectList = []
allObjects = PassDown.objects.all()
for object in allObjects:
    objectList.append(object.pk)

objectList Now contains all the primary keys.

queryDict={}
for i in objectList:
    tempobj = PassDown.objects.get(pk=i)
    tempsubobjectList=[]
    tempsubobjectList.append(tempobj.entry_set.all())
    queryDict.__setitem__(tempobj, tempsubobjectList)

This dictionary contains the actual ith passdown object as the key, with its respective subobject list queryset as the value.
Exactly how we're going to get this into the template is still a mystery to me. We will just try to pass the dictionary
as the queryset and see how it goes.

Now lets turn this into a function, using the parent object and child object as arguments.

def recursive_loop(parent_object, child_object):
    object_list = []
    all_objects = parent_object.objects.all()
    for object in all_objects:
        object_list.append(object.pk)

    query_dict={}
    for i in object_list:
        temp_obj = parent_object.objects.get(pk=i)
        temp_sub_object_list=[]
        lower_child_obj = child_object.lower()
        temp_sub_object_list.append(temp_obj.lower_child_obj_set.all())
        query_dict.__setitem__(temp_obj, temp_sub_object_list)

    return query_dict